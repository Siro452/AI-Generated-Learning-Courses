generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  username         String
  sessions         Session[]
  uploadeddocument UploadedDocument[]
  course           Course[]
}

model Event {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  eventType        String   @db.VarChar(32)
  eventDescription String   @db.VarChar(250)
  eventStatus      String   @db.VarChar(250)
  session          Session  @relation(fields: [sessionid], references: [id], onDelete: Cascade)
  sessionid        String
}

model Session {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  sessionDate DateTime
  user        User     @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid      String
  event       Event[]
  // uploadeddocument UploadedDocument[]
}

model UploadedDocument {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  fileName      String
  fileContent   String
  processedData String?
  user          User     @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid        String

  // session       Session  @relation(fields: [sessionid], references: [id], onDelete: Cascade)
  // sessionid     String   @unique
  // event         Event    @relation(fields: [eventid], references: [id], onDelete: Cascade)
  // eventid       String   @unique
  @@index([id])
}

model Course {
  id             String       @id @default(cuid())
  courseNodename CourseNode[]

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model CourseNode {
  id                    String                  @id @default(cuid())
  course                Course                  @relation(fields: [courseid], references: [id], onDelete: Cascade)
  courseid              String                  @unique
  title                 String
  description           String
  sectionNode           SectionNode[]
  sectionNodeAssessment SectionNodeAssessment[]
}

model SectionNode {
  id                   String                 @id @default(cuid())
  courseNode           CourseNode             @relation(fields: [courseNodeid], references: [id], onDelete: Cascade)
  title                String
  courseNodeid         String                 @unique
  componentNodeArticle ComponentNodeArticle[]
}

model ComponentNodeArticle {
  id            String      @id @default(cuid())
  sectionNode   SectionNode @relation(fields: [sectionNodeid], references: [id], onDelete: Cascade)
  sectionNodeid String      @unique
  title         String
  content       String
  order         Int
}

model SectionNodeAssessment {
  id                 String               @id @default(cuid())
  courseNode         CourseNode           @relation(fields: [courseNodeid], references: [id], onDelete: Cascade)
  courseNodeid       String               @unique
  order              Int
  assessmentQuestion AssessmentQuestion[]
}

model AssessmentQuestion {
  id                      String                @id @default(cuid())
  sectionNodeAssessment   SectionNodeAssessment @relation(fields: [sectionNodeAssessmentid], references: [id], onDelete: Cascade)
  sectionNodeAssessmentid String                @unique
  question                String
  option1                 String                @db.VarChar(250)
  option2                 String                @db.VarChar(250)
  option3                 String                @db.VarChar(250)
  option4                 String                @db.VarChar(250)
  option5                 String                @db.VarChar(250)
  correctAnswer           Int
  guidance                String
  commentary              String
}
