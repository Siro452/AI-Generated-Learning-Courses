// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? @db.Text
//     access_token      String? @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

// model Guestbook {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     name      String
//     message   String   @db.VarChar(100)
// }

model User {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    username  String    @unique
    sessions  Session[]
    documents UploadedDocument[]
}

model Event {
    id               String   @id @default(cuid())
    createdAt        DateTime @default(now())
    eventType        String   @db.VarChar(32)
    eventDescription String   @db.VarChar(250)
    eventStatus      String   @db.VarChar(250)
    session          Session  @relation(fields: [sessionid], references: [id], onDelete: Cascade)
    sessionid        String   @unique
}

model Session {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    sessionDate DateTime @default(now())
    User        User     @relation(fields: [userid], references: [username], onDelete: Cascade)
    userid      String   @unique
    event       Event[]
}

model UploadedDocument {

    id            String   @id @default(cuid())
    User          User     @relation(fields: [userid], references: [username])
    userid        String   @unique
    createdAt     DateTime @default(now())
    fileName      String
    fileContent   String
    processedData String?
}

// See if i can make this relate to id

// returned data table also.

// once it's at the front then put it at the back, to make it more efficient
