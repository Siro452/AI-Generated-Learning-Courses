generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  username         String
  course           Course?
  sessions         Session[]
  uploadeddocument UploadedDocument[]

  @@index([id])
}

model Event {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  eventType        String   @db.VarChar(32)
  eventDescription String   @db.VarChar(250)
  eventStatus      String   @db.VarChar(250)
  sessionid        String
  session          Session  @relation(fields: [sessionid], references: [id], onDelete: Cascade)
}

model Session {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  sessionDate DateTime
  userid      String
  event       Event[]
  user        User     @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model UploadedDocument {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  fileName      String
  fileContent   String
  processedData String?
  userid        String
  courseId      String?
  course        Course?  @relation(fields: [courseId], references: [id])
  user          User     @relation(fields: [userid], references: [id], onDelete: Cascade)

  @@index([id])
}

model Course {
  id               String             @id @default(cuid())
  userid           String             @unique
  User             User               @relation(fields: [userid], references: [id])
  courseNode       CourseNode?
  UploadedDocument UploadedDocument[]
}

model CourseNode {
  id                    String                 @id @default(cuid())
  courseid              String                 @unique
  title                 String
  description           String
  course                Course                 @relation(fields: [courseid], references: [id], onDelete: Cascade)
  sectionNode           SectionNode?
  sectionNodeAssessment SectionNodeAssessment?
}

model SectionNode {
  id                   String                @id @default(cuid())
  title                String
  courseNodeid         String                @unique
  componentNodeArticle ComponentNodeArticle?
  courseNode           CourseNode            @relation(fields: [courseNodeid], references: [id], onDelete: Cascade)
}

model ComponentNodeArticle {
  id            String      @id @default(cuid())
  sectionNodeid String      @unique
  title         String
  content       String
  order         Int
  sectionNode   SectionNode @relation(fields: [sectionNodeid], references: [id], onDelete: Cascade)
}

model SectionNodeAssessment {
  id                 String              @id @default(cuid())
  courseNodeid       String              @unique
  order              Int
  assessmentQuestion AssessmentQuestion?
  courseNode         CourseNode          @relation(fields: [courseNodeid], references: [id], onDelete: Cascade)
}

model AssessmentQuestion {
  id                      String                @id @default(cuid())
  sectionNodeAssessmentid String                @unique
  question                String
  option1                 String                @db.VarChar(250)
  option2                 String                @db.VarChar(250)
  option3                 String                @db.VarChar(250)
  option4                 String                @db.VarChar(250)
  option5                 String                @db.VarChar(250)
  correctAnswer           Int
  guidance                String
  commentary              String
  sectionNodeAssessment   SectionNodeAssessment @relation(fields: [sectionNodeAssessmentid], references: [id], onDelete: Cascade)
}
